import ssl
import socket
import idna
from cryptography import x509
from cryptography.hazmat.backends import default_backend
from datetime import datetime, UTC
from fnmatch import fnmatch

def get_certificate(hostname, port=443):
    try:
        context = ssl.create_default_context()
        with socket.create_connection((hostname, port)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cert_der = ssock.getpeercert(binary_form=True)
                cert = x509.load_der_x509_certificate(cert_der, default_backend())
                return cert
    except Exception as e:
        print(f"[‚ùå] L·ªói khi l·∫•y ch·ª©ng ch·ªâ t·ª´ {hostname}: {e}")
        return None

def validate_certificate(cert, hostname):
    try:
        # 1Ô∏è‚É£ Ki·ªÉm tra ng√†y h·∫øt h·∫°n
        if cert.not_valid_before_utc <= datetime.now(UTC) <= cert.not_valid_after_utc:
            print("[‚úÖ] Ch·ª©ng ch·ªâ c√≤n hi·ªáu l·ª±c.")
        else:
            print("[‚ùå] Ch·ª©ng ch·ªâ ƒë√£ h·∫øt h·∫°n ho·∫∑c ch∆∞a c√≥ hi·ªáu l·ª±c.")
            return False

        # 2Ô∏è‚É£ Ki·ªÉm tra t√™n mi·ªÅn (Name Matching)
        common_name = cert.subject.get_attributes_for_oid(x509.NameOID.COMMON_NAME)[0].value
        if fnmatch(hostname, common_name) or fnmatch(hostname, f"*.{hostname.split('.')[-2]}.{hostname.split('.')[-1]}"):
            print(f"[‚úÖ] T√™n mi·ªÅn kh·ªõp v·ªõi ch·ª©ng ch·ªâ ({common_name}).")
        else:
            print(f"[‚ùå] T√™n mi·ªÅn kh√¥ng kh·ªõp! Ch·ª©ng ch·ªâ cho {common_name}, nh∆∞ng truy c·∫≠p {hostname}.")
            return False

        # 3Ô∏è‚É£ Ki·ªÉm tra chu·ªói ch·ª©ng ch·ªâ (Certificate Chain) - ƒê∆°n gi·∫£n h√≥a
        issuer = cert.issuer.get_attributes_for_oid(x509.NameOID.COMMON_NAME)[0].value
        print(f"[‚ÑπÔ∏è] Ch·ª©ng ch·ªâ ƒë∆∞·ª£c c·∫•p b·ªüi: {issuer}")
        return True
    except Exception as e:
        print(f"[‚ùå] L·ªói khi x√°c th·ª±c ch·ª©ng ch·ªâ: {e}")
        return False

if __name__ == "__main__":
    hostname = input("üîç Nh·∫≠p t√™n mi·ªÅn (VD: google.com): ").strip()
    cert = get_certificate(hostname)
    if cert:
        validate_certificate(cert, hostname)
